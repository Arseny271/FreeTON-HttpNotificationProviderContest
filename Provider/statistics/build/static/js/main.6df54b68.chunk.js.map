{"version":3,"sources":["pages/stat.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["PageStat","useState","undefined","stat","setStat","stat2","setStat2","useEffect","currentTime","Math","floor","Date","now","fetch","headers","method","body","JSON","stringify","then","result","json","className","xType","color","animation","margin","left","right","top","bottom","tickPadding","style","fontFamily","fontSize","fontStyle","fontWeight","fill","stroke","strokeWidth","data","messages_delivered","map","y","x","App","Fragment","path","component","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAMMA,EAAW,WACf,MAAwBC,wBAAcC,GAAtC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BH,wBAAcC,GAAxC,mBAAOG,EAAP,KAAcC,EAAd,KA0BA,OAxBAC,qBAAU,WACR,IAAMC,EAAcC,KAAKC,MAAMC,KAAKC,MAAQ,KAE5CC,MAAM,qDAAsD,CAC1DC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,OAAQC,KAAMC,KAAKC,UAAU,CACnC,WAAsD,GAAxCT,KAAKC,OAAOF,EAAc,MAAQ,IAAU,SAAYA,EAAa,OAAU,OAE9FW,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UAAQF,MAAK,SAAAC,GACpChB,EAAQgB,MAGVP,MAAM,qDAAsD,CAC1DC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,OAAQC,KAAMC,KAAKC,UAAU,CACnC,WAA0D,KAA3CT,KAAKC,OAAOF,EAAc,OAAS,MAAc,SAAYA,EAAa,OAAU,SAEpGW,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UAAQF,MAAK,SAAAC,GACpCd,EAASc,QAGV,IAGI,sBAAKE,UAAY,YAAjB,UACL,6EAEA,sBAAKA,UAAY,mBAAjB,UACE,gEACA,qBAAKA,UAAY,aAAjB,SACGnB,GAAQ,eAAC,IAAD,CAAgBoB,MAAM,OAAOC,MAAQ,UAAUC,WAAS,EAACC,OAAU,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAA1G,UACP,cAAC,IAAD,CACEC,YAAgB,GAChBC,MAAS,CACPC,WAAY,SACZC,SAAU,OACVC,UAAW,SACXC,WAAY,MACZC,KAAM,UACNC,OAAQ,UAGZ,cAAC,IAAD,CAAON,MAAS,CACdC,WAAY,SACZC,SAAU,OACVC,UAAW,SACXC,WAAY,MACZC,KAAM,UACNC,OAAQ,UAGV,cAAC,IAAD,CACId,MAAQ,4BAERQ,MAAS,CAACK,KAAM,OAAQE,YAAa,KACrCC,KAASrC,EAAKsC,mBAAmBC,KAAI,SAACC,EAAWC,GAAgB,MAAO,CAAEA,EAAG,IAAIjC,KAAiB,IAAZR,EAAKyC,EAAEA,IAAYD,kBAMnH,sBAAKrB,UAAY,mBAAjB,UACE,oEACA,qBAAKA,UAAY,aAAjB,SACGjB,GAAS,eAAC,IAAD,CAAgBkB,MAAM,OAAOC,MAAQ,UAAUC,WAAS,EAACC,OAAU,CAACC,KAAM,GAAIC,MAAO,GAAIC,IAAK,GAAIC,OAAQ,IAA1G,UACR,cAAC,IAAD,CACEC,YAAgB,GAChBC,MAAS,CACPC,WAAY,SACZC,SAAU,OACVC,UAAW,SACXC,WAAY,MACZC,KAAM,UACNC,OAAQ,UAGZ,cAAC,IAAD,CAAON,MAAS,CACdC,WAAY,SACZC,SAAU,OACVC,UAAW,SACXC,WAAY,MACZC,KAAM,UACNC,OAAQ,UAGV,cAAC,IAAD,CACId,MAAQ,4BAERQ,MAAS,CAACK,KAAM,OAAQE,YAAa,KACrCC,KAASnC,EAAMoC,mBAAmBC,KAAI,SAACC,EAAWC,GAAgB,MAAO,CAAEA,EAAG,IAAIjC,KAAkB,IAAbN,EAAMuC,EAAEA,IAAYD,sBC9FnHE,EAAM,WACV,OAAO,cAAC,IAAMC,SAAP,UACL,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAO,IAAMC,UAAchD,IAClC,cAAC,IAAD,CAAUiD,GAAK,cCIRC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1BZ,M","file":"static/js/main.6df54b68.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { FlexibleXYPlot, XAxis, YAxis, LineSeries, LineMarkSeries } from 'react-vis';\r\n\r\n\r\nimport \"./css/auth.css\";\r\n\r\nconst PageStat = () => {\r\n  const [stat, setStat] = useState<any>(undefined);\r\n  const [stat2, setStat2] = useState<any>(undefined);\r\n\r\n  useEffect(() => {\r\n    const currentTime = Math.floor(Date.now() / 1000);\r\n\r\n    fetch(\"https://debot.events.ton.arsen12.ru/api/statistics\", {\r\n      headers: { 'Content-Type': 'application/json' }, \r\n      method: \"POST\", body: JSON.stringify({\r\n        \"start_time\": Math.floor((currentTime - 3600) / 60) * 60, \"end_time\": currentTime, \"period\": 60\r\n      })\r\n    }).then(result => result.json()).then(result => {\r\n      setStat(result);\r\n    })\r\n\r\n    fetch(\"https://debot.events.ton.arsen12.ru/api/statistics\", {\r\n      headers: { 'Content-Type': 'application/json' }, \r\n      method: \"POST\", body: JSON.stringify({\r\n        \"start_time\":  Math.floor((currentTime - 86400) / 1800) * 1800, \"end_time\": currentTime, \"period\": 1800\r\n      })\r\n    }).then(result => result.json()).then(result => {\r\n      setStat2(result);\r\n    })\r\n\r\n  }, []);\r\n\r\n\r\n  return <div className = \"page-stat\">\r\n    <h1> Free TON Notification provider statistics </h1>\r\n\r\n    <div className = \"page-chart-block\">\r\n      <h2>Messages delivered (last hour)</h2>\r\n      <div className = \"page-chart\">\r\n        {stat && <FlexibleXYPlot xType=\"time\" color = \"#ff2400\" animation margin = {{left: 35, right: 35, top: 15, bottom: 60}}>\r\n          <XAxis\r\n            tickPadding = { 25 }\r\n            style = {{\r\n              fontFamily: \"Roboto\",\r\n              fontSize: \"12px\",\r\n              fontStyle: \"normal\",\r\n              fontWeight: \"500\" as any,\r\n              fill: \"#A5A5A5\",\r\n              stroke: \"none\"\r\n            }}\r\n          />\r\n          <YAxis style = {{\r\n            fontFamily: \"Roboto\",\r\n            fontSize: \"12px\",\r\n            fontStyle: \"normal\",\r\n            fontWeight: \"500\" as any,\r\n            fill: \"#A5A5A5\",\r\n            stroke: \"none\"\r\n          }}/>\r\n\r\n          <LineSeries\r\n              color = \"var(--main-primary-color)\"\r\n              /*markStyle={{fill: \"var(--main-primary-color)\", stroke: \"white\", strokeWidth: \"2\"}}*/\r\n              style = {{fill: \"none\", strokeWidth: \"1\"}}\r\n              data = { stat.messages_delivered.map((y: number, x: number) => { return { x: new Date(stat.x[x] * 1000), y }})}\r\n          />\r\n        </FlexibleXYPlot>}\r\n      </div>\r\n    </div>    \r\n\r\n    <div className = \"page-chart-block\">\r\n      <h2>Messages delivered (last 24 hours)</h2>\r\n      <div className = \"page-chart\">\r\n        {stat2 && <FlexibleXYPlot xType=\"time\" color = \"#ff2400\" animation margin = {{left: 35, right: 35, top: 15, bottom: 60}}>\r\n          <XAxis\r\n            tickPadding = { 25 }\r\n            style = {{\r\n              fontFamily: \"Roboto\",\r\n              fontSize: \"12px\",\r\n              fontStyle: \"normal\",\r\n              fontWeight: \"500\" as any,\r\n              fill: \"#A5A5A5\",\r\n              stroke: \"none\"\r\n            }}\r\n          />\r\n          <YAxis style = {{\r\n            fontFamily: \"Roboto\",\r\n            fontSize: \"12px\",\r\n            fontStyle: \"normal\",\r\n            fontWeight: \"500\" as any,\r\n            fill: \"#A5A5A5\",\r\n            stroke: \"none\"\r\n          }}/>\r\n\r\n          <LineSeries\r\n              color = \"var(--main-primary-color)\"\r\n              /*markStyle={{fill: \"var(--main-primary-color)\", stroke: \"white\", strokeWidth: \"2\"}}*/\r\n              style = {{fill: \"none\", strokeWidth: \"1\"}}\r\n              data = { stat2.messages_delivered.map((y: number, x: number) => { return { x: new Date(stat2.x[x] * 1000), y }})}\r\n          />\r\n        </FlexibleXYPlot>}\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n}\r\n\r\nexport { PageStat }\r\n","import React from 'react';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\n\r\nimport { PageStat } from \"./pages/stat\";\r\n\r\nconst App = () => {\r\n  return <React.Fragment>\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path = \"/\"   component = { PageStat }/>\r\n        <Redirect to = \"/\"/>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </React.Fragment>\r\n}\r\n\r\nexport { App }\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from \"mobx-react\"\r\n\r\nimport { LanguageProvider } from \"./utils/language-utils\"\r\nimport { App } from './app';\r\n\r\nimport reportWebVitals from './reportWebVitals';\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}